var Jobs=webpackJsonpJobs([1],{173:function(e,t,n){"use strict";function r(e){const t=e.getFullYear(),n=e.getMonth()+1,r=e.getDate(),o=e=>e<10?"0"+e:e;return`${t}-${o(n)}-${o(r)}`}function o(e){return e.feed.entry.map(e=>({id:e.gsx$id.$t,summary:e.gsx$summary.$t}))}function a(e,t){return e.innerHTML=t}function s(e,t){return t in this?e:e.concat(t)}Object.defineProperty(t,"__esModule",{value:!0});var i=n(174),c=(n.n(i),n(90)),l=n(179),u=n(180),f=n(181),d=n(182);`https://spreadsheets.google.com/feeds/list/1dtZyUAobcWC6yYbdsR1_Oww29XCbEUMABVD20w4gIpI/2/public/full?alt=json`;const p={response:{},set ajax(e){return Object.assign(this.response,e)},get data(){return o(this.response)},table:document.getElementById("resultsTable"),graph:document.getElementById("resultsGraph"),noRefsList:document.getElementById("noRefsList"),graphSize:function(e){return e<730?300:730<e<1e3?450:600}(document.documentElement.clientWidth),allTermStrings:u.a.slice(0),get postedDate(){const e=this.response.feed.updated.$t;return r(e?new Date(e):new Date)},get totalSummaries(){return this.data.length},get presentTerms(){return this.data.map(e=>Object(u.b)(e.summary,e.id))},get termsIndex(){return Object(c.b)(this.presentTerms)},get eachIndexLength(){return Object.keys(this.termsIndex).map(e=>[e,this.termsIndex[e].length])},get allWithNoRefs(){return this.allTermStrings.reduce(s.bind(this.termsIndex),[])},get graphNodes(){return Object(d.c)(this.termsIndex)},get graphLinks(){return Object(d.b)(this.termsIndex)},debug:{intersect:c.a,createLinks:d.b}};t.App=p,Object(l.a)("https://spreadsheets.google.com/feeds/list/1dtZyUAobcWC6yYbdsR1_Oww29XCbEUMABVD20w4gIpI/2/public/full?alt=json").then(e=>{p.ajax=e,p.graph.innerHTML="",a(resultsTable,Object(f.b)(p.eachIndexLength,p.totalSummaries,p.postedDate)),Object(d.a)(p.graphNodes,p.graphLinks,p.graph,p.graphSize),a(noRefsList,Object(f.a)(p.allWithNoRefs))}).catch(console.log)},174:function(e,t,n){var r=n(175);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0};o.transform=void 0;n(177)(r,o);r.locals&&(e.exports=r.locals)},175:function(e,t,n){(t=e.exports=n(176)(void 0)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Fira+Sans:400,700);",""]),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Merriweather:400,700);",""]),t.push([e.i,"h1,h2,h3,h4,h5,h6 {\n  font-family: 'Fira Sans', sans-serif;\n  letter-spacing: 0.2rem\n}\n\nhr {\n  width: 50%;\n  border: 1px solid #ccc;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n\n  font-family: 'Merriweather', serif;\n  font-size: 0.85rem;\n    \n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nheader {\n  height: 20vh;\n  padding: 0;\n  margin: 0;\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nheader > h1,h3,h5 {\n  margin: 0;\n  padding: 0;\n}\n\nmain {\n  width: 90vw;\n}\n\nsection {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\ntd {\n    font-family: 'Fira Sans', sans-serif;\n    font-weight: 500;\n    letter-spacing: 0.15rem;\n}\n\ntd, th {\n    text-align: left;\n    padding: 0.1rem 1rem 0.3rem 1rem;\n    border-bottom: 1px dashed #aaa;\n}\n\np {\n  line-height: 1.5rem;\n  margin: 1.5rem 1rem 1.5rem 1rem;\n}\n\nfooter {\n  font-family: 'Merriweather', serif;\n  margin: 0;\n}\n\n\n.loading {\n\tmargin: 5rem;\n}\n\ndiv.popup {\n    margin: 0;\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font: 1rem 'Fira Sans';\n    padding: 0.1rem;\n    background-color: #fff;\n    border-radius: 15%;\n    pointer-events: none;\n}\n\n\n@media (min-width: 730){\n  body {\n    font-size: 1.3rem;\n  }\n\n  td, th {\n    padding: 0.4rem 4rem 0.4rem 4rem;\n  }\n}\n\n\n@media (min-width: 1000px){\n  body {\n    font-size: 1.3rem;\n  }\n\n  td, th {\n    padding: 0.5rem;\n  }\n  \n  main {\n    width: 80vw;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n  }\n  \n  section {\n    width: 50%;\n    margin: 2rem;\n  }\n  \n  aside {\n    width: 50%;\n    margin: 2rem;\n  }\n  \n  p {\n    margin: 2rem 0 2rem 0;\n    line-height: 2.2rem;\n  }\n  \n  table {\n    width: 100%;\n  }\n}\n",""])},176:function(e,t){function n(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var a=r(o),s=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(s).concat([a]).join("\n")}return[n].join("\n")}function r(e){return"/*# "+("sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e)))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},177:function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=h[r.id];if(o){o.refs++;for(s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(u(r.parts[s],t))}else{for(var a=[],s=0;s<r.parts.length;s++)a.push(u(r.parts[s],t));h[r.id]={id:r.id,refs:1,parts:a}}}}function o(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],s=t.base?a[0]+t.base:a[0],i={css:a[1],media:a[2],sourceMap:a[3]};r[s]?r[s].parts.push(i):n.push(r[s]={id:s,parts:[i]})}return n}function a(e,t){var n=m(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=v[v.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),v.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=m(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function s(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=v.indexOf(e);t>=0&&v.splice(t,1)}function i(e){var t=document.createElement("style");return e.attrs.type="text/css",l(t,e.attrs),a(e,t),t}function c(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",l(t,e.attrs),a(e,t),t}function l(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function u(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var l=y++;n=b||(b=i(t)),r=f.bind(null,n,l,!1),o=f.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=c(t),r=p.bind(null,n,t),o=function(){s(n),n.href&&URL.revokeObjectURL(n.href)}):(n=i(t),r=d.bind(null,n),o=function(){s(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}function f(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var a=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(a,s[t]):e.appendChild(a)}}function d(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function p(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=x(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),i=e.href;e.href=URL.createObjectURL(s),i&&URL.revokeObjectURL(i)}var h={},g=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),m=function(e){var t={};return function(n){if(void 0===t[n]){var r=e.call(this,n);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[n]=r}return t[n]}}(function(e){return document.querySelector(e)}),b=null,y=0,v=[],x=n(178);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=g()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=o(e,t);return r(n,t),function(e){for(var a=[],s=0;s<n.length;s++){var i=n[s];(c=h[i.id]).refs--,a.push(c)}e&&r(o(e,t),t);for(s=0;s<a.length;s++){var c=a[s];if(0===c.refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete h[c.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},178:function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return e;var a;return a=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")"})}},179:function(e,t,n){"use strict";async function r(e){var t=await fetch(e,o);return await t.json()}n.d(t,"a",function(){return r});const o={mode:"cors"}},180:function(e,t,n){"use strict";function r(e){const t=`${e.reduce((e,t,n)=>("c++"===t?t="c\\+\\+":t.indexOf(" ")>-1&&(t=t.split(" ").join("\\s")),"sql"===t?t:"c"===t?`(^|[^A-Za-z])${t}($|[^A-Za-z\\+])`:0===n?e+`(^|[^A-Za-z])${t}($|[^A-Za-z])`:e+`|(^|[^A-Za-z])${t}($|[^A-Za-z])`),"")}`;return new RegExp(t,"i")}function o(e){return c.reduce((t,n)=>n.rx.test(e)?t.concat(n.lang):t,[])}function a(e,t){return c.reduce((t,n)=>n.rx.test(e)?t.concat(n.lang):t,[]).reduce((e,n)=>Object.assign(e,{[n]:t}),{})}n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i});const s={Awk:["awk"],Bash:["bash"],"C *":["c"],"C#":["c#","csharp","c sharp"],"C++":["c++"],Clojure:["clojure"],COBOL:["cobol"],Erlang:["erlang"],"Go *":["go","golang"],Haskell:["haskell"],Java:["java"],JavaScript:["javascript","java script","js"],Lisp:["lisp"],"Objective-C":["objective-c","objective c"],Pascal:["pascal"],Perl:["perl"],PHP:["php"],Powershell:["powershell","power shell"],Python:["python"],Ruby:["ruby"],Rust:["rust"],Scala:["scala"],Scheme:["scheme"],SQL:["sql"],"Swift *":["swift"],"Visual Basic":["visual basic","visualbasic","vb","vba"]},i=Object.keys(s),c=(e=>Object.keys(e).map(t=>({lang:t,rx:r(e[t])})))(s);(()=>{const e=[{actual:o("this contains java").length,expected:1},{actual:o("this contains javas").length,expected:0},{actual:o("php and elephpant").length,expected:1},{actual:o("schemers with a lisp").length,expected:1},{actual:o("contains vb/sql/js/c++").length,expected:4}];let t=e.length,n=0;console.log("---- MODULE TEST: Words ----");for(let r=0;r<t;r++)e[r].actual===e[r].expected?n+=1:(console.log("---- #"+r+" ----"),console.log(`  actual: ${e[r].actual}`),console.log(`expected: ${e[r].expected}`));console.log(`${n} out of ${t} tests passed`),console.log("----------------------------")})()},181:function(e,t,n){"use strict";function r(e,t,n){return`\n    <div class="table">\n        <table class="table">\n            <tr>\n                <th colspan="3">References from ${t} postings</th>\n            </tr>\n            <tr>\n                <th colspan="3">Collected on ${n}</th>\n            </tr>\n        \n            <tr>\n                <th>Rank</th>\n                <th>Language</th>\n                <th>References</th>\n            </tr>\n            \n            ${e.slice(0).sort((e,t)=>e[1]<t[1]).reduce((e,t,n)=>e+`\n                    <tr>\n                        <th scope="row">${n+1}</th>\n                        <td>${t[0]}</td>\n                        <td>${t[1]}</td>\n                    </tr>`,``)}\n        </table>\n    </div>`}function o(e){return e.reduce((e,t)=>e+`<li>${t}</li>`,``)}n.d(t,"b",function(){return r}),n.d(t,"a",function(){return o})},182:function(e,t,n){"use strict";function r(e){return Object.keys(e).map(t=>({term:t,size:e[t].length}))}function o(e){const t=Object.keys(e),n=t.length,r=(e,t)=>e>t;let o=[];for(let a=0;a<n;a++){const s=t[a],i=e[s];i.sort(r);for(let a=0;a<n;a++){const n=t[a],c=e[n];c.sort(r);const l=Object(u.a)(i,c).length,f="C *"!==s&&"C *"!==n;n!==s&&l>0&&f&&o.push({target:n,source:s,shared:l})}}return o}function a(e,t,n,r){const o=r,a=o,i=l.select(n).append("svg").attr("width",o).attr("height",a),u=l.forceSimulation().nodes(e);u.force("charge_force",l.forceManyBody().strength(-r).distanceMin(50).distanceMax(r/2)).force("center_force",l.forceCenter(o/2,a/2));const f=l.select("body").append("div").attr("class","popup").style("opacity",0),d=i.append("g").attr("class","nodes").selectAll("circle").data(e).enter().append("circle").attr("r",12).attr("fill","red"),p=l.forceLink(t).id(function(e){return e.term});u.on("tick",function(){d.attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y}),h.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}),u.force("links",p);const h=i.append("g").attr("class","links").selectAll("line").data(t).enter().append("line").attr("stroke-width",3).style("stroke",c);s(n,f,d,e=>`<p>${e.term}</p>`),s(n,f,h,e=>`<p>${e.source.term} & ${e.target.term} : <strong>${e.shared}</strong></p>`)}function s(e,t,n,r){const o=i(e);n.on("mouseover",e=>{t.transition().duration(200).style("opacity",.9),t.html(r(e)).style("left",`${o.left}px`).style("top",`${o.top}px`)}).on("mouseout",e=>{t.transition().duration(500).style("opacity",0)})}function i(e){const t=e.getBoundingClientRect(),n=window.pageXOffset||document.documentElement.scrollLeft,r=window.pageYOffset||document.documentElement.scrollTop;return{top:t.top+r,left:t.left+n}}function c(e){const t=e.shared;return t<2?"#555":t<3?"#568":t<5?"#58a":t<9?"#5ad":t<14?"#5cf":t<20?"#5ff":t<27?"#2ff":t<35?"#0ff":"#00f"}n.d(t,"c",function(){return r}),n.d(t,"b",function(){return o}),n.d(t,"a",function(){return a});var l=n(91),u=n(90);(()=>{const e={Scala:["d996ecb107d95f5e"],Python:["1a8db8794d09a479","22264e0253a9351b","2973bbaa38b591bd","2d865695d82ae324","4ad674d054f4bbf1","57b44a3efb8f140f","76ad4673f873412e","7aae7e244f359744","91a7f3f9f500fd19","9d937cc790aabc39"],Java:["04d4a774fe2bd693","060564ecba2e71e2","0696f3c1db4ea2b7"],"Go *":["04d4a774fe2bd693","183f4803b7ba8f51","2e05678631f51cf4"],WhatLang:["1a8db8794d09a479","76ad4673f873412e","7aae7e244f359744"]},t=[0===Object(u.a)(e.Scala,e.Python).length,1===Object(u.a)(e.Java,e["Go *"]).length,3===Object(u.a)(e.WhatLang,e.Python).length];let n=t.length,r=0;console.log("---- MODULE TEST: Graph ----"),t.forEach((e,t)=>{console.assert(e,`tests[${t}]`),e&&(r+=1)}),console.log(`${r} out of ${n} tests passed`),console.log("----------------------------")})()},90:function(e,t,n){"use strict";function r(e){return e.reduce((e,t)=>{for(var n=Object.keys(t),r={},o=0;o<n.length;o++){var a=n[o],s=t[a];e[a]?Object.assign(r,{[a]:[...e[a],s]}):Object.assign(r,{[a]:[s]})}return Object.assign(e,r)},{})}function o(e,t){for(var n=[],r=e,o=t;0!==r.length&&0!==o.length;)r[0]===o[0]?(n.push(r[0]),r=r.slice(1),o=o.slice(1)):r[0]<o[0]?r=r.slice(1):o=o.slice(1);return n}n.d(t,"b",function(){return r}),n.d(t,"a",function(){return o})}},[173]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,